package com.mtbetterApiZero.api.controller;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import com.mtbetterApiZero.domain.model.Cliente;
import com.mtbetterApiZero.domain.repository.ClienteRepository;



@RequestMapping("/clientes")
@RestController
public class ClienteController {
	

	@Autowired
	private ClienteRepository clienteRepository;
	

	@GetMapping
	public List<Cliente> listar(){
		return clienteRepository.findAll();
	}
	
	
	//acima um metodo de pesquisa, utiliza-se o Postman ou qualquer outro metodo de requerimento para buscar os clientes.
	
	@GetMapping("/{clienteId}")
	public ResponseEntity<Cliente> buscar(@PathVariable Long clienteId) {
		return clienteRepository.findById(clienteId)
		.map(ResponseEntity::ok)
		.orElse(ResponseEntity.notFound().build());
		}
	
	@ResponseStatus(HttpStatus.CREATED)
	@PostMapping
	public Cliente adicionar(@RequestBody Cliente cliente) {
		
		return clienteRepository.save(cliente);
	}
	@PutMapping("/clienteId")
	public ResponseEntity<Cliente> atualizar(@PathVariable Long clienteId,
			@RequestBody Cliente cliente){
		if (!clienteRepository.existsById(clienteId)){
			return ResponseEntity.notFound().build();
		}
		cliente.setId(clienteId);
		cliente = clienteRepository.save(cliente);
		
		return ResponseEntity.ok(cliente);
	}
	
	}

